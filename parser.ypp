/* This block of code will go into the header file generated by bison */
%code requires{
   class Data;
}

/* This block will be put into the cpp source code */
%{
 #include <stdio.h>
 #include <stdlib.h>
 #include <iostream>
 #include "parser.hpp"
 void yyerror(const char *msg);

int yylex();

class Data {
public:
   int data;
   Data() { data = 0; }
   ~Data() {}
};

%}

%union{
  double dval;
  int ival;
  Data* cval;
}

%locations

%start input
%token MULT DIV PLUS MINUS EQUAL L_PAREN R_PAREN
%token <dval> NUMBER
%type <dval> exp
%type <cval> input
%left PLUS MINUS
%left MULT DIV
%nonassoc UMINUS


%% 
input:	{ $$ = new Data(); }
			| input line { $$ = $1; $1->data++; }
			;

line:		exp ';'         { printf("\t%f\n", $1);}
			;

exp:		NUMBER                { $$ = $1; }
			| exp PLUS exp        { $$ = $1 + $3; }
			| exp MINUS exp       { $$ = $1 - $3; }
			| exp MULT exp        { $$ = $1 * $3; }
			| exp DIV exp         { if ($3==0) yyerror("divide by zero"); else $$ = $1 / $3; }
			| MINUS exp %prec UMINUS { $$ = -$2; }
			| L_PAREN exp R_PAREN { $$ = $2; }
			;
%%


